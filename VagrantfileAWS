# psi-turkey vm, testing
# poldracklab

VAGRANTFILE_API_VERSION = "2"

$script = <<SCRIPT

if [ ! -d $HOME/miniconda ]
then
 # install anaconda
 wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
 chmod +x miniconda.sh
 ./miniconda.sh -b
 echo "export PATH=$HOME/miniconda/bin:\\$PATH" >> .bashrc
 echo "export PATH=$HOME/miniconda/bin:\\$PATH" >> .env
fi

# install python packages
$HOME/miniconda/bin/conda update --yes conda
$HOME/miniconda/bin/pip install setuptools
$HOME/miniconda/bin/pip install psycopg2
$HOME/miniconda/bin/conda install --yes pip numpy scipy nose traits networkx
$HOME/miniconda/bin/conda install --yes pandas

sudo apt-get update > /dev/null
sudo apt-get install -y --force-yes git 
sudo apt-get install -y --force-yes build-essential
sudo apt-get install -y --force-yes nginx

# Install psiturk
sudo apt-get install -y --force-yes libreadline6 libreadline6-dev
sudo apt-get install -y --force-yes libncurses-dev
$HOME/miniconda/bin/pip install python-Levenshtein
$HOME/miniconda/bin/pip install git+git://github.com/NYUCCL/psiTurk.git@master

# Install postgresql (not tested)
sudo apt-get install -y --force-yes postgresql postgresql-contrib
sudo apt-get install -y --force-yes pgadmin3
sudo apt-get install -y --force-yes libpq-dev
sudo -u postgres psql -c "CREATE USER psiturkpy WITH PASSWORD 'psiturkpy';"
sudo -u postgres psql -c "CREATE DATABASE psiturkpy;"

# Install MySQL
sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password psiturkpy'
sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password psiturkpy'
sudo apt-get install -y --force-yes libmysqlclient-dev
sudo apt-get install -y --force-yes mysql-server
$HOME/miniconda/bin/pip install MySQL-python
sudo apt-get install -y --force-yes vim

sudo /etc/init.d/nginx start

# Install psiturkpy to generate everything else
mkdir -p $HOME/psiturk-build
if [ ! -d $HOME/psiturk-build/psiturk-python ]
then
  git clone https://github.com/psiturk/psiturk-python.git $HOME/psiturk-build/psiturk-python
  cd $HOME/psiturk-build/psiturk-python
  $HOME/miniconda/bin/pip install -r requirements.txt  
  $HOME/miniconda/bin/python setup.py install
fi

# Download experiments, battery, vm, doc repos
sudo chmod u+x $HOME/psiturk-build/psiturk-python/script/download_repos.py
$HOME/miniconda/bin/python $HOME/psiturk-build/psiturk-python/script/download_repos.py $HOME/psiturk-build
sudo mysql -uroot -ppsiturkpy < $HOME/psiturk-build/vm/script/createdb.sql

# Replace standard index.html with link to psiturkpy docs
sudo mv $HOME/psiturk-build/vm/static/index.html /usr/share/nginx/html/index.html

CUSTOM_INSTALL="False"

if [[ $CUSTOM_INSTALL == "False" ]] ; then
    sudo chmod u+x $HOME/psiturk-build/psiturk-python/script/standard_setup_battery.py 
    $HOME/miniconda/bin/python $HOME/psiturk-build/psiturk-python/script/standard_setup_battery.py $HOME/psiturk-battery
else

if ! [ -f $HOME/custom_setup_battery.py ]; then
echo """
#!/usr/bin/python
from psiturkpy.battery import generate
import sys
battery_dest = sys.argv[1]
config = [SUB_CONFIG_SUB]
experiments = [SUB_EXPERIMENTS_SUB]
generate(battery_dest=battery_dest,experiments=experiments,config=config)        
""" >/tmp/aijfaef
sudo cp /tmp/aijfaef $HOME/custom_setup_battery.py
fi

sudo chmod u+x $HOME/custom_setup_battery.py
$HOME/miniconda/bin/python $HOME/custom_setup_battery.py $HOME/psiturk-battery

fi 

# User should log in to battery folder
cd $HOME/psiturk-battery
echo "Psiturkpy-battery generation complete!"

SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.forward_x11 = true

  config.vm.define :engine do |engine_config|
      #engine_config.vm.box = "aws"
      engine_config.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
      engine_config.vm.hostname = 'psiturkey-vm'

    engine_config.vm.provider :aws do |aws, override|
        aws.access_key_id = "AWS_ACCESS_KEY"
        aws.secret_access_key = "AWS_SECRET_ACCESS_KEY"
        aws.keypair_name = "AWS_KEYPAIR_NAME"
        aws.region = "us-west-2" 
        aws.ami = "ami-5189a661"
        aws.instance_type = "t2.small"
        aws.security_groups = "AWS_SECURITY_GROUP"
        aws.iam_instance_profile_name = "AWS_IAM_INSTANCE_PROFILE_NAME"
        override.ssh.username = "ubuntu"
        override.ssh.private_key_path = "AWS_PRIVATE_KEY_PAIR"
        override.nfs.functional = false
    end
        engine_config.vm.provision "shell", :privileged => false, inline: $script
  end
end
